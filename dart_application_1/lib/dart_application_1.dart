import 'dart:io';
import 'dart:convert';
import 'dart:math';

class TicTacToe {
  late List<List<String>> board;
  late int size;
  String userMark = 'X';
  String botMark = 'O';
  String currentPlayer = 'X';
  String gameMode = 'human';
  Random random = Random();

  TicTacToe(int boardSize) {
    size = boardSize;
    board = List.generate(size, (i) => List.generate(size, (j) => ' '));
  }

  void chooseMark(String mark) {
    userMark = mark.toUpperCase();
    botMark = (mark.toUpperCase() == 'O') ? 'X' : 'O';
    currentPlayer = userMark;
  }

  void displayBoard() {
    print('\n${'=' * (size * 4 + 1)}');
    for (int i = 0; i < size; i++) {
      String row = '|';
      for (int j = 0; j < size; j++) {
        row += ' ${board[i][j]} |';
      }
      print(row);
      if (i < size - 1) {
        print('|' + '---|' * size);
      }
    }
    print('=' * (size * 4 + 1));
  }

  bool checkWin(String mark) {
    for (int i = 0; i < size; i++) {
      if (board[i].every((cell) => cell == mark)) {
        return true;
      }
    }

    for (int j = 0; j < size; j++) {
      bool columnWin = true;
      for (int i = 0; i < size; i++) {
        if (board[i][j] != mark) {
          columnWin = false;
          break;
        }
      }
      if (columnWin) return true;
    }

    bool mainDiagonalWin = true;
    for (int i = 0; i < size; i++) {
      if (board[i][i] != mark) {
        mainDiagonalWin = false;
        break;
      }
    }
    if (mainDiagonalWin) return true;

    bool antiDiagonalWin = true;
    for (int i = 0; i < size; i++) {
      if (board[i][size - 1 - i] != mark) {
        antiDiagonalWin = false;
        break;
      }
    }
    if (antiDiagonalWin) return true;

    return false;
  }

  bool checkDraw() {
    for (int i = 0; i < size; i++) {
      for (int j = 0; j < size; j++) {
        if (board[i][j] == ' ') {
          return false;
        }
      }
    }
    return true;
  }

  bool makeMove(int row, int col) {
    if (row < 0 ||
        row >= size ||
        col < 0 ||
        col >= size ||
        board[row][col] != ' ') {
      return false;
    }
    board[row][col] = currentPlayer;
    return true;
  }

  void switchPlayer() {
    currentPlayer = currentPlayer == userMark ? botMark : userMark;
  }

  void randomizeFirstPlayer() {
    currentPlayer = random.nextBool() ? userMark : botMark;
  }

  List<int> getAIMove() {
    List<List<int>> availableMoves = [];

    for (int i = 0; i < size; i++) {
      for (int j = 0; j < size; j++) {
        if (board[i][j] == ' ') {
          availableMoves.add([i, j]);
        }
      }
    }

    for (var move in availableMoves) {
      int i = move[0], j = move[1];
      board[i][j] = botMark;
      if (checkWin(botMark)) {
        board[i][j] = ' ';
        return [i, j];
      }
      board[i][j] = ' ';
    }

    for (var move in availableMoves) {
      int i = move[0], j = move[1];
      board[i][j] = userMark;
      if (checkWin(userMark)) {
        board[i][j] = ' ';
        return [i, j];
      }
      board[i][j] = ' ';
    }

    int center = size ~/ 2;
    if (board[center][center] == ' ') {
      return [center, center];
    }

    if (availableMoves.isNotEmpty) {
      return availableMoves[random.nextInt(availableMoves.length)];
    }

    return [0, 0];
  }

  void resetGame() {
    for (int i = 0; i < size; i++) {
      for (int j = 0; j < size; j++) {
        board[i][j] = ' ';
      }
    }
    randomizeFirstPlayer();
  }
}

void runGame() {
  stdout.encoding = utf8;

  print('üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É "–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏"! üéÆ');

  TicTacToe? game;
  String gameMode = 'human';
  String mark = 'X';

  while (true) {
    stdout.write('\x1B[2J\x1B[H');
    print('\n' + '=' * 50);
    print('–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ');
    print('–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: ${gameMode == 'human' ? '–ß–µ–ª–æ–≤–µ–∫ –ø—Ä–æ—Ç–∏–≤ —á–µ–ª–æ–≤–µ–∫–∞' : '–ß–µ–ª–æ–≤–µ–∫ –ø—Ä–æ—Ç–∏–≤ –ò–ò'}');
    print('–¢–µ–∫—É—â–∏–π —Å–∏–º–≤–æ–ª: $mark');
    print('=' * 50);
    print('1. –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É');
    print('2. –í—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º –∏–≥—Ä—ã');
    print('3. –í—ã–±—Ä–∞—Ç—å —Å–∏–º–≤–æ–ª (X –∏–ª–∏ O)');
    print('0. –í—ã—Ö–æ–¥');

    stdout.write('\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ');
    String? choice = stdin.readLineSync();

    switch (choice?.trim()) {
      case '1':
        if (game == null) {
          int? size = getBoardSize();
          if (size != null) {
            game = TicTacToe(size);
            game.gameMode = gameMode;
            game.chooseMark(mark);
            playGame(game);
          }
        } else {
          game.resetGame();
          game.gameMode = gameMode;
          game.chooseMark(mark);
          playGame(game);
        }
        break;
      case '2':
        gameMode = selectGameMode();
        print(
          '–†–µ–∂–∏–º –∏–≥—Ä—ã –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${gameMode == 'human' ? '–ß–µ–ª–æ–≤–µ–∫ –ø—Ä–æ—Ç–∏–≤ —á–µ–ª–æ–≤–µ–∫–∞' : '–ß–µ–ª–æ–≤–µ–∫ –ø—Ä–æ—Ç–∏–≤ –ò–ò'}',
        );
        if (game != null) {
          game.gameMode = gameMode;
        }
        break;
      case '3':
        mark = selectMark();
        if (game != null) {
          game.chooseMark(mark);
        }
        print('–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–∏–º–≤–æ–ª: $mark');
        break;
      case '0':
        print('–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã');
        return;
      default:
        print('–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
  }
}

int? getBoardSize() {
  while (true) {
    stdout.write('\x1B[2J\x1B[H');
    stdout.write('\n–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è (–æ—Ç 3 –¥–æ 10): ');
    String? input = stdin.readLineSync();

    if (input == null || input.trim().isEmpty) {
      print('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.');
      continue;
    }

    try {
      int size = int.parse(input.trim());
      if (size >= 3 && size <= 10) {
        return size;
      } else {
        print('–†–∞–∑–º–µ—Ä –ø–æ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 10.');
      }
    } catch (e) {
      print('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.');
    }
  }
}

String selectGameMode() {
  while (true) {
    stdout.write('\x1B[2J\x1B[H');
    print('\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:');
    print('1. –ß–µ–ª–æ–≤–µ–∫ –ø—Ä–æ—Ç–∏–≤ —á–µ–ª–æ–≤–µ–∫–∞');
    print('2. –ß–µ–ª–æ–≤–µ–∫ –ø—Ä–æ—Ç–∏–≤ –ò–ò');

    stdout.write('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–∂–∏–º–∞: ');
    String? choice = stdin.readLineSync();

    switch (choice?.trim()) {
      case '1':
        return 'human';
      case '2':
        return 'ai';
      default:
        print('–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
  }
}

String selectMark() {
  while (true) {
    stdout.write('\x1B[2J\x1B[H');
    print('\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Å–∏–º–≤–æ–ª (X –∏–ª–∏ O): ');
    String? choice = stdin.readLineSync();

    if (choice != null && (choice.trim().toUpperCase() == 'X' || choice.trim().toUpperCase() == 'O')) {
      return choice.trim().toUpperCase();
    }
    print('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ X –∏–ª–∏ O.');
  }
}

void playGame(TicTacToe game) {
  stdout.write('\x1B[2J\x1B[H');
  print('\nüéØ –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É!');
  print('–†–∞–∑–º–µ—Ä –ø–æ–ª—è: ${game.size}x${game.size}');
  print(
    '–†–µ–∂–∏–º: ${game.gameMode == 'human' ? '–ß–µ–ª–æ–≤–µ–∫ –ø—Ä–æ—Ç–∏–≤ —á–µ–ª–æ–≤–µ–∫–∞' : '–ß–µ–ª–æ–≤–µ–∫ –ø—Ä–æ—Ç–∏–≤ –ò–ò'}',
  );
  print('–ü–µ—Ä–≤—ã–π —Ö–æ–¥ –¥–µ–ª–∞–µ—Ç –∏–≥—Ä–æ–∫: ${game.currentPlayer}');

  while (true) {
    stdout.write('\x1B[2J\x1B[H');
    game.displayBoard();

    print('\n–•–æ–¥ –∏–≥—Ä–æ–∫–∞: ${game.currentPlayer}');

    if (game.gameMode == 'ai' && game.currentPlayer == game.botMark) {
      print('–ò–ò –¥—É–º–∞–µ—Ç...');
      List<int> aiMove = game.getAIMove();
      if (game.makeMove(aiMove[0], aiMove[1])) {
        print('–ò–ò —Å–¥–µ–ª–∞–ª —Ö–æ–¥: ${aiMove[0] + 1}, ${aiMove[1] + 1}');
      }
    } else {
      List<int>? move = getPlayerMove(game.size);
      if (move != null) {
        if (!game.makeMove(move[0], move[1])) {
          print('–ù–µ–≤–µ—Ä–Ω—ã–π —Ö–æ–¥! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
          continue;
        } else {
          print('–•–æ–¥ –ø—Ä–∏–Ω—è—Ç!');
        }
      } else {
        print('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        continue;
      }
    }

    stdout.write('\x1B[2J\x1B[H');
    game.displayBoard();

    if (game.checkWin(game.currentPlayer)) {
      print('\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ò–≥—Ä–æ–∫ ${game.currentPlayer} –ø–æ–±–µ–¥–∏–ª! üéâ');
      break;
    }

    if (game.checkDraw()) {
      print('\nü§ù –ù–∏—á—å—è! –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤–Ω–∏—á—å—é! ü§ù');
      break;
    }

    game.switchPlayer();
  }

  print('\n' + '=' * 30);
  stdout.write('–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑? (y/n): ');
  String? playAgain = stdin.readLineSync();

  if (playAgain?.toLowerCase().trim() == 'y' ||
      playAgain?.toLowerCase().trim() == 'yes') {
    game.resetGame();
    game.gameMode = game.gameMode;
    playGame(game);
  }
}

List<int>? getPlayerMove(int boardSize) {
  while (true) {
    stdout.write('–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ö–æ–¥–∞ (—Å—Ç—Ä–æ–∫–∞ —Å—Ç–æ–ª–±–µ—Ü, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1 2): ');
    String? input = stdin.readLineSync();

    if (input == null || input.trim().isEmpty) {
      print('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.');
      continue;
    }

    List<String> coords = input.trim().split(' ');
    if (coords.length != 2) {
      print('–í–≤–µ–¥–∏—Ç–µ –¥–≤–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.');
      continue;
    }

    try {
      int row = int.parse(coords[0]) - 1;
      int col = int.parse(coords[1]) - 1;

      if (row >= 0 && row < boardSize && col >= 0 && col < boardSize) {
        return [row, col];
      } else {
        print('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 1 –¥–æ $boardSize.');
      }
    } catch (e) {
      print('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞.');
    }
  }
}

